// 예외 처리(Exception Handling)
// 예외(=에러)가 발생하면 나머지 코드는 실행을 멈춘다
// 하지만 에러가 발생해도 '에러와 관련 없는 나머지 코드'는 실행을 하고 싶다
// 에러가 발생한 부분을 포장(봉인)하는 것으로 나머지 코드를 실행할 수 있다
// try - catch문
try {
    // 1. 에러 발생하면 이 영역은 실행되지 않는다
    // 2. 에러가 발생하지 않으면 이 영역이 실행된다
    let num = 100 / 0; // 에러(=예외) 발생
} catch(error) { // error: 발생한 에러에 대한 정보를 갖고 있는 객체, 에러 객체
    // 1. 에러(=예외) 발생하면 이 영역이 실행된다(예외 처리)
    // 2. 에러가 발생하지 않으면 이 영역은 실행되지 않는다
    console.log("에러가 발생했습니다."); // 예외 처리
    console.log(error);
}

// '에러와 관련 없는 나머지 코드' 실행된다
console.log("나는 에러와 아무 상관이 없습니다.");


// 스코프(Scope)
// 변수, 상수, 함수 등을 사용할 수 있는 유효 범위
// 중괄호 블럭(block) 내부에서 생성한 변수, 상수, 함수는 중괄호 블럭 내부에서만 사용 가능하다
// 단, 객체 리터럴에 사용된 중괄호는 제외
// 스코프(유효 범위)가 다르면, 이름의 충돌이 발생하지 않는다
// 단, 이름이 동일하면 코드의 가독성이 떨어지기 때문에, 다른 이름을 권장한다
function scope() {
    // scope 함수 블럭 내부에서는 number 변수
    let number = 50;
    try {
        // try 블럭 내부에서는 number 상수(shadow)
        const number = 100;
        console.log(number); // 100
    } catch {

    }
    console.scope(number); // 50
}